name: Build and Push Docker Images

on:
  workflow_call:
    inputs:
      image:
        description: 'The name of the Docker image to build and push'
        required: true
        type: string
    secrets:
      DOCKER_HUB_USERNAME:
        description: 'Docker Hub username'
        required: false
      DOCKER_HUB_PASSWORD:
        description: 'Docker Hub password'
        required: false

jobs:
  get-job-env:
    name: Get Job Environment
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.set-env.outputs.env_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set Environment
        id: set-env
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "env_name=production" >> $GITHUB_OUTPUT
          else
            echo "env_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: get-job-env
    environment: ${{ needs.get-job-env.outputs.env_name }}
    env:
      env_name: ${{ needs.get-job-env.outputs.env_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Get Docker Registry Info
        id: get-docker-registry
        run: |
          if [[ "${{ env.env_name }}" == "production" ]]; then
            # Docker Hub
            echo "docker_registry=" >> $GITHUB_OUTPUT
            echo "docker_username=${{ secrets.DOCKER_HUB_USERNAME }}" >> $GITHUB_OUTPUT
            echo "docker_password=${{ secrets.DOCKER_HUB_PASSWORD }}" >> $GITHUB_OUTPUT
          else
            echo "docker_registry=ghcr.io/${{ github.repository }}/docker/" >> $GITHUB_OUTPUT
            echo "docker_username=${{ github.actor }}" >> $GITHUB_OUTPUT
            echo "docker_password=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_OUTPUT
          fi
    
      - name: Log in to Github Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ steps.get-docker-registry.outputs.docker_registry }}
          username: ${{ steps.get-docker-registry.outputs.docker_username }}
          password: ${{ steps.get-docker-registry.outputs.docker_password }}

      - name: Image Name and Tags
        run: |
          export SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
          echo "IMAGE_NAME=${{ steps.get-docker-registry.outputs.docker_registry }}${{ inputs.image }}" >> $GITHUB_ENV

          if ! [[ -f ./docker/${{ inputs.image }}/VERSION.txt ]]; then
            echo "VERSION.txt not found in ./docker/${{ inputs.image }}/"
            exit 1
          fi
          semver=$(cat ./docker/${{ inputs.image }}/VERSION.txt | tr -d '\n')

          IMAGE_TAGS=""
          if [[ "${{ env.env_name }}" == "production" ]]; then
            IMAGE_TAGS="main|${semver}|${semver}-${SHORT_SHA}"
          else
            IMAGE_TAGS="${{ github.ref_name }}|${{ github.ref_name }}-${semver}|${{ github.ref_name }}-${semver}-${SHORT_SHA}"
          fi

          if [[ "${{ env.env_name }}" == "production" ]]; then
            IMAGE_TAGS="${IMAGE_TAGS}|latest"
          fi
          echo "IMAGE_TAGS=${IMAGE_TAGS}" >> $GITHUB_ENV
      
      - name: Docker Args
        run: |
          DOCKER_BUILD_ARGS=""
          DOCKER_IMAGES=""
          # Docker Images
          for tag in $(echo "${{ env.IMAGE_TAGS }}" | tr '|' '\n'); do
            IMAGE="${{ env.IMAGE_NAME }}:${tag}"

            DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS} -t ${IMAGE}"
            DOCKER_IMAGES="${DOCKER_IMAGES}|${IMAGE}"
          done
          echo "DOCKER_BUILD_ARGS=${DOCKER_BUILD_ARGS}" >> $GITHUB_ENV
          echo "DOCKER_IMAGES=${DOCKER_IMAGES}" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          docker build \
            ${{ env.DOCKER_BUILD_ARGS }} \
            ./docker/${{ inputs.image }}

      # Push the Docker image to the registry
      - name: Push Docker Image
        run: |
          for image in $(echo "${{ env.DOCKER_IMAGES }}" | tr '|' '\n'); do
            echo "Pushing ${image}"
            docker push ${image}
          done
